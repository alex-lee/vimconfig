" vim: set expandtab:

" Before anything else, enable pathogen (vim extension manager).
filetype off
execute pathogen#infect()
execute pathogen#helptags()
filetype plugin indent on
syntax on

" Appearance
set number
set background=dark
colorscheme solarized
set statusline=%<%F%h%m%r\ %=%l,%c%V\ %P
set laststatus=2

" Behavior
set showcmd         " Show (partial) command in status line.
set showmatch       " Show matching brackets.
set ignorecase      " Do case insensitive matching
set smartcase       " Do smart case matching
set incsearch       " Incremental search
set hlsearch        " Highlight matches
set mouse=a         " Enable mouse usage (all modes)
set scrolloff=4     " Show some context at top and bottom of window
set autoindent
set tabstop=4
set shiftwidth=4
set textwidth=100
set nojoinspaces
set nofoldenable
set modeline        " Enable modeline for per-file vim settings

" Custom leader
let mapleader = ","

" File browser (netrw)
let g:netrw_list_hide='.*\.swp,.*\.pyc'

" Quickfix navigation
nmap <C-n> :cnext<CR>
nmap <C-p> :cprevious<CR>
nmap <C-Down> :lnext<CR>
nmap <C-Up> :lprevious<CR>

" Use ag (silversearcher) with Ack.
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" Custom mappings:
" reformat the paragraph
nnoremap <leader>q gqap
nnoremap Q gqap
" easier than hitting escape
inoremap jj <Esc>
" close the buffer, but don't close the window (instead load previous)
command BD bp|bd #

" Syntastic settings
nmap <leader>l :SyntasticCheck<CR>
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_mode_map = {"mode": "passive"} " only run manually

" Clear signs (e.g. linter marks from syntastic, pymode, etc.)
nmap <leader>L :sign unplace *<CR>

" Pymode settings
let g:pymode_options_max_line_length = 100
let g:pymode_folding = 0
let g:pymode_lint_on_write = 0
let g:pymode_rope_lookup_project = 1
let g:pymode_rope_show_doc_bind = '<leader>gd'
let g:pymode_rope_goto_definition_bind = 'gd'
let g:pymode_rope_complete_on_dot = 0       " activate manually with <Ctrl-Space> instead
let g:syntastic_python_checkers = ['python', 'mypy']
let g:syntastic_python_mypy_args = '--ignore-missing-imports'
au FileType python nmap <leader>l :PymodeLint<CR>

" Markdown (plasticboy) settings
let g:vim_markdown_folding_disabled = 1

" Vim-go settings
" gd by default = go-def
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>ta <Plug>(go-test)
au FileType go nmap <leader>tf <Plug>(go-test-func)
au FileType go nmap <leader>ae <Plug>(go-alternate-edit)
au FileType go nmap <leader>as <Plug>(go-alternate-split)
au FileType go nmap <leader>av <Plug>(go-alternate-vertical)
au FileType go nmap <leader>v <Plug>(go-vet)
au FileType go nmap <leader>l <Plug>(go-metalinter)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <leader>ds <Plug>(go-def-split)
au FileType go nmap <leader>dv <Plug>(go-def-vertical)
au FileType go nmap <leader>dt <Plug>(go-def-tab)
au FileType go nmap <leader>gd <Plug>(go-doc)
au FileType go nmap <leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <leader>gb <Plug>(go-doc-browser)
au FileType go nmap <leader>gi <Plug>(go-imports)
au FileType go nmap <leader>s <Plug>(go-implements)
au FileType go nmap <leader>i <Plug>(go-info)
au FileType go nmap <leader>e <Plug>(go-rename)
"let g:go_auto_sameids = 1
"let g:go_auto_type_info = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

" Neocomplete
inoremap <expr><C-l> neocomplete#complete_common_string()
au FileType go nmap <leader>ne :NeoCompleteEnable<CR>
au FileType go nmap <leader>nd :NeoCompleteDisable<CR>

" Tagbar
nmap <F8> :TagbarToggle<CR>
